#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage[normalem]{ulem}

% hack into hyperref
\makeatletter
\DeclareUrlCommand\ULurl@@{%
  \def\UrlFont{\ttfamily\color{blue}}%
  \def\UrlLeft{\uline\bgroup}%
  \def\UrlRight{\egroup}}
\def\ULurl@#1{\hyper@linkurl{\ULurl@@{#1}}{#1}}
\DeclareRobustCommand*\url{\hyper@normalise\ULurl@}
\makeatother

% new line when needed for URLs
\sloppy

\let\oldforeignlanguage\foreignlanguage
\renewcommand{\foreignlanguage}[2]{\emph{\oldforeignlanguage{#1}{#2}}}

\usepackage{ccicons}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "times" "default"
\font_sans "helvet" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor={black}, urlcolor={blue}"
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\notefontcolor #555753
\boxbgcolor #faf583
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\rightmargin 2cm
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Amazon Web Services IoT
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename img/aws-iot.pdf
	lyxscale 200
	width 25col%

\end_inset


\begin_inset Newline newline
\end_inset


\size larger
Internet de las Cosas
\size large

\begin_inset Newline newline
\end_inset


\size normal
Máster en Ciencia de Datos e Ingeniería de Computadores
\begin_inset Newline newline
\end_inset

Universidad de Granada
\end_layout

\begin_layout Author
Cristian G Guerrero
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent

\emph on
Uso de la plataforma Amazon Web Services IoT para el TODO ###
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ccLogo
\end_layout

\end_inset


\begin_inset space ~
\end_inset

2018, Cristian G Guerrero
\end_layout

\begin_layout Standard
\noindent
Este trabajo está editado con licencia 
\begin_inset Quotes fld
\end_inset

Creative Commons
\begin_inset Quotes frd
\end_inset

 del tipo:
\end_layout

\begin_layout Quote
Atribución-CompartirIgual 3.0 España (CC BY-SA 3.0 ES) 
\end_layout

\begin_layout Paragraph
Usted es libre para:
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ccShare
\end_layout

\end_inset


\begin_inset space ~
\end_inset

Compartir — copiar y redistribuir el material en cualquier medio o formato.
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ccRemix
\end_layout

\end_inset


\begin_inset space ~
\end_inset

Adaptar — remezclar, transformar y crear a partir del material.
\end_layout

\begin_layout Standard
Para cualquier propósito, incluso comercialmente.
\end_layout

\begin_layout Paragraph
Bajo los siguientes términos:
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ccAttribution
\end_layout

\end_inset


\begin_inset space ~
\end_inset

Atribución — Usted debe darle crédito a esta obra de manera adecuada, proporcion
ando un enlace a la licencia, e indicando si se han realizado cambios.
 Puede hacerlo en cualquier forma razonable, pero no de forma tal que sugiera
 que usted o su uso tienen el apoyo del licenciante.
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ccShareAlike
\end_layout

\end_inset


\begin_inset space ~
\end_inset

Compartir
\begin_inset space ~
\end_inset

Igual — Si usted mezcla, transforma o crea nuevo material a partir de esta
 obra, usted podrá distribuir su contribución siempre que utilice la misma
 licencia que la obra original.
\end_layout

\begin_layout Standard
No hay restricciones adicionales — Usted no puede aplicar términos legales
 ni medidas tecnológicas que restrinjan legalmente a otros hacer cualquier
 uso permitido por la licencia.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Introducción
\end_layout

\begin_layout Standard
Este documento presenta ...
\end_layout

\begin_layout Standard
Internet de las Cosas es guay...
\end_layout

\begin_layout Standard
prueba de ello es el gran crecimiento....
 y la multitud de plataformas IoT disponibles.
 En este trabajo, conectaremos un dispositivo IoT a una de estas plataformas.
 ###
\end_layout

\begin_layout Standard
El código fuente de este documento, así como los ejemplos usados en el mismo
 pueden encontrase en 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/guyikcgg/Internet-de-las-Cosas
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Objetivos
\end_layout

\begin_layout Standard
El principal objetivo de este trabajo es construir y programar un dispositivo
 IoT, que tendrá la capacidad de comunicarse con 
\emph on
la nube
\emph default
.
 En concreto, el dispositivo monitorizará la distancia de forma continua,
 transmitiendo los valores medidos a la nube de Amazon (
\emph on
Amazon
\begin_inset space ~
\end_inset

Cloud
\emph default
).
\end_layout

\begin_layout Standard
Basaremos nuestro diseño en la placa de desarrollo 
\emph on
NodeMCU
\begin_inset space ~
\end_inset

Amica
\emph default
.
 Esta placa está basada en el módulo Wi-Fi 
\emph on
ESP8266
\emph default
, que dispone de una pila TCP/IP completa y de un microcontrolador.
 Los valores de distancia serán medidos gracias al sensor de ultrasonidos
 
\emph on
US-100
\emph default
, que conectaremos ayudándonos de una placa de prototipado.
\end_layout

\begin_layout Standard
Nuestro dispositivo se conectará a la nube de Amazon Web Services para IoT
 (
\emph on
AWS
\begin_inset space ~
\end_inset

IoT
\emph default
).
 La comunicación entre el dispositivo y la nube se llevará a cabo a través
 del protocolo HTTP, tras haber establecido un canal seguro mediante TLS.
\end_layout

\begin_layout Standard
Finalmente, visualizaremos los datos con un panel de control (
\lang english
dashboard
\lang spanish
) basado en ###.
 De esta forma, contaremos con un sistema IoT completamente funcional.
\end_layout

\begin_layout Section
Kit de desarrollo
\end_layout

\begin_layout Standard
Para la realización de este trabajo contamos con un kit de desarrollo que
 contiene los siguientes elementos (figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Kit-de-desarrollo"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/device-00-kit-v2.jpg
	lyxscale 10
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Kit-de-desarrollo"

\end_inset

Kit de desarrollo de la asignatura Internet de las Cosas.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
NodeMCU
\begin_inset space ~
\end_inset

Amica será el cerebro de nuestro dispositivo.
 Contiene el módulo ESP8266, que programaremos para establecer la comunicación
 con la nube a través de una conexión Wi-Fi.
 Más información sobre esta placa en 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://espressif.com/en/products/esp8266/
\end_layout

\end_inset

.
\end_layout

\begin_layout Description
US-100 este sensor de ultrasonidos medirá la distancia a petición de nuestro
 programa en el ESP8266.
 
\end_layout

\begin_layout Description
Cable
\begin_inset space ~
\end_inset

USB este cable 
\emph on
USB
\begin_inset space ~
\end_inset

tipo
\begin_inset space ~
\end_inset

A
\emph default
 a 
\emph on
Micro
\begin_inset space ~
\end_inset

USB
\begin_inset space ~
\end_inset

tipo
\begin_inset space ~
\end_inset

B
\emph default
 nos servirá para programar el módulo ESP8266 desde nuestro ordenador.
\end_layout

\begin_layout Description
Placa
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

prototipado
\begin_inset space ~
\end_inset

y
\begin_inset space ~
\end_inset

cables
\begin_inset space ~
\end_inset

puente necesarios para interconectar el módulo ESP8266 con el sensor US-100.
\end_layout

\begin_layout Section
Estructura del documento
\end_layout

\begin_layout Standard
Este documento se organiza en las siguientes secciones, atendiendo a los
 pasos que realizaremos.
\end_layout

\begin_layout Itemize
En primer lugar, en el capítulo
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:THEORY"

\end_inset

, presentaremos la plataforma de Amazon para Internet de las Cosas (AWS
\begin_inset space ~
\end_inset

IoT).
 Bajo este epígrafe describiremos los aspectos que será conveniente tener
 en cuenta en la posterior integración del dispositivo en la plataforma.
\end_layout

\begin_layout Itemize
El capítulo
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:CONECTION"

\end_inset

 está dedicado a los elementos necesarios para llevar a cabo la conexión
 de AWS
\begin_inset space ~
\end_inset

IoT con el dispositivo ESP8266.
 En este capítulo trataremos tanto la confiugración de nuestra instancia
 AWS
\begin_inset space ~
\end_inset

IoT (sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Configuración-de-AWSIoT"

\end_inset

), como el montaje del dispositivo físico (sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Montaje-del-dispositivo"

\end_inset

).
 Finalmente, procederemos a su programación (sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Configuración-de-NodeMCU"

\end_inset

).
 
\end_layout

\begin_layout Itemize
Por último, en el capítulo
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:DASHBOARD"

\end_inset

, diseñaremos un panel para la visualización de datos (
\lang english
dashboard
\lang spanish
) basado en ###.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:THEORY"

\end_inset

Amazon Web Services IoT
\end_layout

\begin_layout Standard
En esta sección describimos la arquitectura de la plataforma de Amazon para
 Internet de las Cosas (AWS
\begin_inset space ~
\end_inset

IoT), explorando su potencial y las particularidades que presenta.
\end_layout

\begin_layout Standard
Como se describe en la documentación oficial (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://docs.aws.amazon.com/iot/latest/developerguide/what-is-aws-iot.html
\end_layout

\end_inset

), AWS
\begin_inset space ~
\end_inset

IoT proporciona una 
\emph on
comunicación bidireccional segura
\emph default
 entre dispositivos conectados a Internet (ya sean sensores, actuadores,
 microcontroladores, electrodomésticos inteligentes, etc.) y la nube de Amazon
 (
\emph on
AWS
\begin_inset space ~
\end_inset

Cloud
\emph default
).
 Esto nos permite recoger, almacenar y analizar datos de una gran variedad
 de dispositivos.
 Del mismo modo, nos permite crear aplicaciones para controlar estos dispositivo
s a través de un 
\emph on
smartphone
\emph default
 o 
\emph on
tablet
\emph default
.
\end_layout

\begin_layout Standard
En este sentido, AWS
\begin_inset space ~
\end_inset

IoT actúa como una pasarela a la cuál pueden conectarse tanto dispositivos
 como aplicaciones de terceros.
 Además, ofrece una interfaz sencilla para procesar los datos recogidos
 a través de los demás servicios de AWS.
 Este modo de operación hace que Amazon haya concentrado sus esfuerzos en
 una plataforma robusta y segura, dando soporte a empresas que desean construir
 aplicaciones complejas y escalables.
 Por este motivo, AWS
\begin_inset space ~
\end_inset

IoT cuenta con un panel de control relativamente complejo, que nos permitirá
 gestionar una multitud de opciones.
 No obstante, esta plataforma no proporciona por sí misma herramientas para
 representar los datos obtenidos.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Usaremos ### como alternativa.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Componentes de AWS IoT
\end_layout

\begin_layout Standard
La plataforma AWS
\begin_inset space ~
\end_inset

IoT está formada por diversos módulos que trabajan orquestados para proporcionar
 la funcionalidad completa ofrecida por este servicio
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
proporcionar todas sus funcionalidades
\end_layout

\end_inset

.
 Con el fin de hacer un uso eficaz de la plataforma, conviene tener una
 imagen global de su arquitectura.
 Solo de este modo entenderemos el significado de las configuraciones llevadas
 a cabo en la siguiente sección.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement t
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/AWS_IoT23._CB520207442_.png
	lyxscale 60
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Componentes-AWS"

\end_inset

Principales componentes de AWS
\begin_inset space ~
\end_inset

IoT.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Componentes-AWS"

\end_inset

 muestra los componentes principales de AWS
\begin_inset space ~
\end_inset

IoT.
 Los elementos que quedan dentro del recuadro amarillo constituyen la plataforma
 propiamente dicha.
 Fuera del recuadro quedan los 
\emph on
dispositivos
\emph default
, las 
\emph on
aplicaciones
\emph default
 y los 
\emph on
servicios
\emph default
, tanto los de AWS como los de terceras partes.
 A continuación describimos los principales componentes de AWS
\begin_inset space ~
\end_inset

IoT.
\end_layout

\begin_layout Description
Pasarela
\begin_inset space ~
\end_inset

para
\begin_inset space ~
\end_inset

dispositivos
\begin_inset space ~
\end_inset

(
\lang english
Device
\begin_inset space ~
\end_inset

gateway
\lang spanish
) se encarga de establecer la comunicación entre la nube de Amazon y cada
 dispositivo.
 El 
\lang english
Device
\begin_inset space ~
\end_inset

gateway
\lang spanish
 es el responsable de que esta comunicación se lleve a cabo de forma eficiente
 y segura.
\end_layout

\begin_deeper
\begin_layout Description
Agente
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

mensajes
\begin_inset space ~
\end_inset

(
\lang english
Message
\begin_inset space ~
\end_inset

broker
\lang spanish
) proporciona un mecanismo seguro para que los dispositivos y las aplicaciones
 de AWS
\begin_inset space ~
\end_inset

IoT publiquen y reciban mensajes entre sí, basándose en el protocolo MQTT
 o en MQTT sobre WebSocket.
\end_layout

\end_deeper
\begin_layout Description
Motor
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

reglas
\begin_inset space ~
\end_inset

(
\lang english
Rules
\begin_inset space ~
\end_inset

engine
\lang spanish
) proporciona funciones de procesamiento de mensajes y de integración con
 otros sevicios de la nube de Amazon.
 También permite usar el 
\lang english
Message
\begin_inset space ~
\end_inset

broker
\lang spanish
 para volver a publicar mensajes para otros suscriptores.
\end_layout

\begin_layout Description
Registro
\begin_inset space ~
\end_inset

(
\lang english
Registry
\lang spanish
) organiza los recursos asociados a cada dispositivo en la nube de Amazon
 (AWS
\begin_inset space ~
\end_inset

Cloud).
 Es necesario registrar los dispositivos y asociar hasta tres atributos
 personalizados a cada uno.
 Este componente también es responsable de asociar los certificados digitales
 y los IDs de clientes MQTT a cada dispositivo.
\end_layout

\begin_deeper
\begin_layout Description
Registro
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

grupos
\begin_inset space ~
\end_inset

(
\lang english
Group
\begin_inset space ~
\end_inset

registry
\lang spanish
) permite administrar varios dispositivos a la vez clasificándolos en grupos.
\end_layout

\end_deeper
\begin_layout Description
Sombra
\begin_inset space ~
\end_inset

del
\begin_inset space ~
\end_inset

dispositivo
\begin_inset space ~
\end_inset

(
\lang english
Device
\begin_inset space ~
\end_inset

shadow
\lang spanish
) documento JSON utilizado para 
\begin_inset Note Note
status open

\begin_layout Plain Layout
almacenar y recuperar información
\end_layout

\end_inset

 representar el estado actual de un dispositivo.
 También es usado para solicitar una acción al dispositivo.
\end_layout

\begin_layout Standard
AWS
\begin_inset space ~
\end_inset

IoT dispone de otros componentes y servicios con los que el desarrollador
 puede interactuar para realizar tareas específicas.
 No obstante, su uso es más avanzado y queda fuera de los objetivos de este
 documento.
\end_layout

\begin_layout Standard
Cabe mencionar que tanto el agente de mensajes como el motor de reglas utilizan
 las características de seguridad de AWS para enviar datos de forma segura
 a dispositivos u otros servicios de AWS.
 De este modo, tan solo los dispositivos convenientemente autorizados pueden
 establecer una comunicación con AWS
\begin_inset space ~
\end_inset

IoT.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Esquema-de-funcionamiento"

\end_inset

Esquema de funcionamiento
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
un poco de blabla: ahora que conocemos los elementos básicos de la plataforma,
 vamos a ver cómo funcionan y cómo se relacionan con el exterior (nuestro
 dispositivo).
\end_layout

\end_inset

El esquema de funcionamiento de AWS
\begin_inset space ~
\end_inset

IoT es el siguiente.
\end_layout

\begin_layout Standard
Por un lado, tendremos un dispositivo físico ejecutando la AWS
\begin_inset space ~
\end_inset

IoT
\begin_inset space ~
\end_inset

SDK.
 Este dispositivo debe disponer de unas credenciales con las que se identificará
 y se autenticará ante la Nube.
 En general, estas credenciales vienen dadas por un certificado digital.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
y el CA necesario para autenticar AWS!!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Por otro lado, tendremos que definir el dispositivo en la plataforma, usando
 el Servicio de registro (
\lang english
Registry
\lang spanish
) anteriormente descrito.
 Este dispositivo virtual dispondrá de un 
\emph on
nombre único
\emph default
, que servirá para identificarlo, y de unos 
\emph on
atributos estáticos
\emph default
 a modo de descripción.
 De forma adicional, el dispositivo puede ser de un tipo determinado que
 hayamos definido previamente y puede tener un certificado asociado.
 En general, el dispositivo virtual tendrá asociado el mismo certificado
 digital que instalemos en el dispositivo físico, de forma que AWS
\begin_inset space ~
\end_inset

IoT pueda autenticarlo.
 Este certificado digital puede tener asociada una o varias Políticas de
 uso (
\lang english
Policies
\lang spanish
).
 Gracias a estas políticas de uso, distintos dispositivos tendrán permisos
 para realizar distintas acciones (como publicar o suscribirse en determinados
 topics, actualizar su sombra, etc.).
\end_layout

\begin_layout Subsection
Sombra del dispositivo
\end_layout

\begin_layout Standard
reported vs desired
\end_layout

\begin_layout Standard
\align center
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "95col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family sans
\series bold
\size small
Nota:
\series default
 Los Atributos estáticos sirven para describir los dispositivos, y su función
 no debe confundirse con la de la Sombra del dispositivo (Device shadow).
 Mientras que la sombra es un documento dinámico que contiene valores de
 sensores y de actuadores, estos atributos se almacenan de forma estática
 en el Registro.
 Algunos ejemplos de atributos son: número de serie, versión de firmware
 y descripción del sensor.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Esquema de conexión
\end_layout

\begin_layout Standard
Como en cualquier esquema IoT, nuestro dispositivo se comunicará con la
 plataforma a través de una conexión a Internet.
 En el caso de AWS
\begin_inset space ~
\end_inset

IoT, la comunicación se lleva a cabo a través del protocolo MQTT, sobre
 un canal seguro TLS.
 Para llevar a cabo la conexión con AWS
\begin_inset space ~
\end_inset

IoT, el dispositivo deberá ejecutar algunas de las funciones disponibles
 en el 
\emph on
kit de desarrollo de software del dispositivo
\emph default
 (
\lang english
Device
\begin_inset space ~
\end_inset

SDK
\lang spanish
).
 
\end_layout

\begin_layout Standard
A la hora de conectarse:
\end_layout

\begin_layout Enumerate
El dispositivo, que actuará con el rol de cliente, inicia una comunicación
 segura TLS con el servidor de AWS IoT seleccionado.
\end_layout

\begin_layout Enumerate
Servidor y cliente intercambian y verifican el certificado digital de la
 otra parte, asegurándose la autenticidad de los extremos.
 Terminado este paso, dispositivo y plataforma se comunican de forma segura,
 cifrando los mensajes con una clave establecida para la sesión.
\end_layout

\begin_layout Enumerate
Intercambio de mensajes MQTT/HTTP.
\end_layout

\begin_layout Standard
Cuando la plataforma recibe un mensaje MQTT válido, lo procesa convenientemente,
 reenviándolo a todos los dispositivos suscritos al topic.
 Existen topics especiales con los que los dispositivos pueden actualizar
 su sombra (la sintaxis debe ser la adecuada).
 
\end_layout

\begin_layout Standard

\color red
Certificate ARN
\end_layout

\begin_layout Standard

\color red
A certificate ARN uniquely identifies a certificate in AWS.
 You can use this ARN to interact with this certificate through CLI and
 other methods.
 
\end_layout

\begin_layout Standard

\color red
arn:aws:iot:us-west-2:552719360781:cert/c1a1b8ee69b533eb10a38908d9e7cf0b41b33987
1111955c0336e94c4fe5a56d
\end_layout

\begin_layout Standard

\color red
Thing ARN
\end_layout

\begin_layout Standard

\color red
A thing Amazon Resource Name uniquely identifies this thing.
 
\end_layout

\begin_layout Standard

\color red
arn:aws:iot:us-west-2:552719360781:thing/test_0
\end_layout

\begin_layout Subsection
Special topics
\end_layout

\begin_layout Standard
Reenvío de la sombra a topics especiales
\end_layout

\begin_layout Section
Disparadores y reglas
\end_layout

\begin_layout Standard
AWS IoT permite definir reglas con las que pueden realizarse diversas acciones
 al detectar eventos determinados.
 De este modo, la podemos indicarle a la plataforma que realice las acciones
 necesarias cuando se produzca un evento determinado en cualquiera de los
 dispositivos definidos.
 Estos eventos incluyen la superación de un umbral en un parámetro o la
 aparición de un valor o atributo determinado en un 
\emph on
topic
\emph default
 de MQTT.
 Las acciones que pueden asociarse a un evento suponen la interacción con
 otros servicios de la nube de Amazon.
 Así, por ejemplo, es posible intertar un nuevo registro en una base de
 datos 
\emph on
AWS
\begin_inset space ~
\end_inset

DynamoDB
\emph default
, invocar una función 
\emph on
AWS
\begin_inset space ~
\end_inset

Lambda
\emph default
 o enviar mensajes específicos a 
\emph on
AWS
\begin_inset space ~
\end_inset

Salesforce
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
AWS Lambda??
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
AWS Greengrass
\end_layout

\begin_layout Standard
AWS Greengrass es una nueva tecnología de Amazon, independiente a AWS
\begin_inset space ~
\end_inset

IoT.
 Este servicio nos permite almacenar los datos generados por un grupo de
 dispositivos en la red local, optimizando el uso de la red y permitiendo
 ejecutar acciones de forma local.
 Para ello, comenzamos por definir un conjunto de dispositivos, que denominaremo
s 
\emph on
Greengrass
\begin_inset space ~
\end_inset

Group
\emph default
.
 Este grupo tiene como componente central un elemento físico: el
\emph on
 Greengrass
\begin_inset space ~
\end_inset

Core
\emph default
.
 Definiremos tanto la arquitectura del Greengrass Group como los disparadores
 asociados a los distintos eventos de forma segura en la plataforma AWS
\begin_inset space ~
\end_inset

Greengrass.
 De esta manera, la publicación y recepción de mensajes y las reglas quedan
 definidas en la nube.
 Una vez concluida la configuración, su despliegue en el la red de área
 local es tan simple como sincronizar el Greengrass
\begin_inset space ~
\end_inset

Core, que pasará a adoptar la configuración definida en la nube.
 Como resultado, el grupo de dispositivos es capaz de almacenar los datos
 y procesarlos a pesar de que la conexión a Internet sea intermitente, permitien
do una respuesta rápida a los eventos y optimizando los recursos de red.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:CONECTION"

\end_inset

Conexión entre ESP8266 y AWS
\begin_inset space ~
\end_inset

IoT
\end_layout

\begin_layout Standard
Ahora que hemos estudiado la estructura de AWS
\begin_inset space ~
\end_inset

IoT, vamos a poner nuestros conocimientos en práctica conectando un dispositivo
 a la nube.
 Este dispositivo enviará mensajes periódicamente, que contendrán los valores
 de distancia medidos.
 Para llevar a cabo este proceso, tendremos que ocuparnos de dos tareas
 principales.
 
\end_layout

\begin_layout Standard
En primer lugar, nos ocuparemos de definir un nuevo dispositivo en la nube
 de Amazon.
 Para ello, será necesario crear una cuenta en AWS y acceder a la consola
 del servicio AWS
\begin_inset space ~
\end_inset

IoT
\begin_inset space ~
\end_inset

Core.
 
\end_layout

\begin_layout Standard
Una vez configurado nuestro dispositovo virtual, pasaremos a escribir el
 programa que se ejecutará en el módulo ESP8266.
 Este programa será el responsable de establecer la conexión con AWS
\begin_inset space ~
\end_inset

IoT.
\end_layout

\begin_layout Standard
Por las 
\series bold
limitaciones en el soporte del AWS-SDK para la plataforma ESP8266
\series default
 nuestro dispositivo se conectará a AWS usando la API REST de Amazon a través
 de una conexión HTTPS, en vez de hacerlo a través de MQTT, como se ha descrito
 anteriormente.
 Este modo de conexión es el que se usa típicamente en el lado de la Aplocacione
s, no en el de los dispositivos.
 Esto tiene una serie de implicaciones:
\end_layout

\begin_layout Itemize
El uso de la API REST sobre HTTPS supone una sobrecarga computacional para
 el procesador, por lo que no es aconsejable usarlo en dispositivos alimentados
 por batería.
\end_layout

\begin_layout Itemize
La autenticación del dispositivo no depende de un certificado digital instalado
 en el mismo.
 En este caso, las credenciales son un par de claves pública-privada, cuyo
 uso está asociado a un usuario o aplicación.
\end_layout

\begin_layout Itemize
La ausencia de certificado digital implica que no necesitaremos configurar
 una política de acceso para el mismo.
 En cambio, las credenciales usadas deberán estar asociadas a un usuario
 con permiso para modificar las sombras de los dispositivos definidos en
 la consola AWS
\begin_inset space ~
\end_inset

IoT.
 
\end_layout

\begin_layout Standard
Por estos motivos, 
\series bold
el ejemplo desarrollado
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
 durante esta práctica 
\end_layout

\end_inset

deberá usarse únicamente con propósitos didácticos o de prototipado
\series default
.
 Este modo de operación no debe usarse en la etapa de producción.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "95col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family sans
\series bold
\size small
Nota:
\series default
 Por las limitaciones en el
\series bold
 soporte del AWS-SDK para la plataforma ESP8266
\series default
 nuestro dispositivo no se conectará a AWS
\begin_inset space ~
\end_inset

IoT de la forma convencional.
 En cambio, se conectará como si de una Aplicación se tratara, usando la
 API REST de Amazon a través de una conexión HTTPS.
 Este método supone una sobrecarga computacional para el procesador, por
 lo que no es aconsejable usarlo en dispositivos a batería.
 Además, la seguiridad no se consigue a través de un certificado digital,
 sino a través de una clave pública y privada (como las credenciales de
 usuario).
 
\begin_inset Note Note
status open

\begin_layout Plain Layout

\family sans
\size small
extender este párrafo, para justificar que no necesitamos certificado ni
 policies...
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Poner Apéndice
\begin_inset space ~
\end_inset

A aquí?
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Configuración-de-AWSIoT"

\end_inset

Configuración de AWS
\begin_inset space ~
\end_inset

IoT
\end_layout

\begin_layout Standard
A continuación nos ocuparemos de la configuración de la plataforma AWS
\begin_inset space ~
\end_inset

IoT.
 Para ello, comenzaremos por registrarnos, para poder acceder luego a la
 consola de AWS
\begin_inset space ~
\end_inset

IoT, donde configuraremos nuestro dispositivo virtual.
\end_layout

\begin_layout Standard
\align center
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "95col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family sans
\series bold
\size small
Nota:
\series default
 A lo largo del proceso de configuración nos encontraremos con algunos datos
 que tendremos que anotar para su posterior uso en la programación del ESP8266.
 En lo que sigue, usaremos el color marrón y una tipografía de ancho fijo
 para señalar estos datos.
 Por ejemplo:
\end_layout

\begin_layout Plain Layout

\family sans
\size small
\emph on
Anotaremos el
\emph default
 
\family typewriter
\series bold
\color brown
Nombre
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

la
\begin_inset space ~
\end_inset

Cosa
\family sans
\series default
\color inherit
 
\emph on
para su posterior uso.
 [...] Usaremos el dato 
\family typewriter
\series bold
\emph default
\color brown
Nombre
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

la
\begin_inset space ~
\end_inset

Cosa
\family sans
\series default
\emph on
\color inherit
 anotado previamente.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Registro
\end_layout

\begin_layout Standard
Amazon Web Services (AWS) ofrece un amplio abanico de servicios de computación
 en la nube.
 Para cada servicio, el usuario debe abonar el precio correspondiente a
 los recursos consumidos.
 Aunque existen varias modalidades de facturación, todas ellas requieren
 que el usuario proporcione un método de pago.
 Sin embargo, existen dos alternativas gratuitas.
\end_layout

\begin_layout Subsubsection
AWS Free Tier
\end_layout

\begin_layout Standard
Amazon establece un período de prueba gratuito para atraer nuevos clientes
 y dar a conocer su tecnología.
 En este período, es posible utilizar la mayoría de los servicios ofrecidos
 por AWS sin incurrir en gastos.
 No obstante, es necesario configurar un método de pago para comenzar a
 usar los servicios.
 Todos los detalles sobre AWS
\begin_inset space ~
\end_inset

Free
\begin_inset space ~
\end_inset

Tier están disponibles en 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://aws.amazon.com/free/
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
AWS Educate
\end_layout

\begin_layout Standard
AWS
\begin_inset space ~
\end_inset

Educate proporciona a profesores y alumnos acceso a muchos de los servicios
 de AWS.
 Además, incluye ventajas como programas de capacitación y rutas profesionales
 en la nube de Amazon.
 Esta modalidad, que está disponible en 47 países, requiere que el usuario
 esté vinculado a alguna institución académica y procese una solicitud que
 será tratada de forma personalizada por Amazon
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Deberá usarse el correo institucional en la solicitud.
\end_layout

\end_inset

.
 Los detalles de esta modalidad están disponibles en 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://aws.amazon.com/education/
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Nosotros hemos optado por esta segunda opción.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
Acceso a la plataforma
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/platform-00-access.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Acceso-AWS_Educate"

\end_inset

Acceso a la plataforma a traves de AWS
\begin_inset space ~
\end_inset

Educate.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Una vez realizado el registro, accederemos a la plataforma de AWS siguiendo
 las instrucciones que recibiremos por e-mail.
 Si hemos creado una cuenta usando la modalidad AWS
\begin_inset space ~
\end_inset

Educate, accederemos a la plataforma a través de la web 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.awseducate.com/signin
\end_layout

\end_inset

 (figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Acceso-AWS_Educate"

\end_inset

).
\end_layout

\begin_layout Standard
Anotaremos las claves de acceso 
\family typewriter
\series bold
\size small
\color brown
Access
\begin_inset space ~
\end_inset

Key
\begin_inset space ~
\end_inset

Id
\family default
\series default
\size default
\color inherit
 y 
\family typewriter
\series bold
\size small
\color brown
Secret
\begin_inset space ~
\end_inset

Access
\begin_inset space ~
\end_inset

Key
\family default
\series default
\size default
\color inherit
 para su posterior uso.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/platform-01-services.png
	lyxscale 50
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Servicios-AWS"

\end_inset

Servicios disponibles en AWS.
 Buscaremos el servicio 
\family sans
\lang english
IoT
\begin_inset space ~
\end_inset

Core
\family default
\lang spanish
.
\end_layout

\end_inset


\end_layout

\end_inset

Una vez que nos hayamos logueado en AWS, tendremos que dirigirnos al panel
 de control de AWS
\begin_inset space ~
\end_inset

IoT.
 Para ello, haremos click en la pestaña 
\family sans
\lang english
Services
\family default
\lang spanish
 y buscaremos la opción 
\family sans
\lang english
IoT
\begin_inset space ~
\end_inset

Core
\family default
\lang spanish
, como se muestra en la figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Servicios-AWS"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/platform-02-welcome.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Bienvenida-AWS-IoT"

\end_inset

Pantalla de bienvenida en la cosola de AWS
\begin_inset space ~
\end_inset

IoT.
 Podemos acceder a los recursos didácticos presentados aquí en cualquier
 momento, a través de la pestaña 
\family sans
\emph on
\lang english
Learn
\family default
\emph default
\lang spanish
.
\end_layout

\end_inset


\end_layout

\end_inset

 La primera vez que accedamos al servicio, nos encontraremos con el mensaje
 de bienvendia de la figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Bienvenida-AWS-IoT"

\end_inset

.
 Usaremos el menú de la izquierda para acceder a las distintas opciones
 de configuración y monitorización.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
Creación y configuración del dispositivo
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Como se ha indicado en el epígrafe
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Esquema-de-funcionamiento"

\end_inset

, para conectar el dispositivo tendremos que definirlo en la plataforma.
 También tendremos que asignarle un certificado digital y una política de
 acceso.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
A continuación describimos los pasos necesarios para crear un dispositivo
 en AWS
\begin_inset space ~
\end_inset

IoT y definir los parámetros necesarios.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/platform-03-manage-things.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Manage-Things"

\end_inset

Pestaña de administración de dispositivos (
\family sans
AWS
\begin_inset space ~
\end_inset

IoT\SpecialChar menuseparator
Manage\SpecialChar menuseparator
Things).
\end_layout

\end_inset


\end_layout

\end_inset

Desde el panel inicial de AWS
\begin_inset space ~
\end_inset

IoT (figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Bienvenida-AWS-IoT"

\end_inset

), nos dirigiremos a la pestaña 
\family sans
\lang english
Manage
\family default
\lang spanish
, y ahí seleccionaremos 
\family sans
\lang english
Things
\family default
\lang spanish
.
 Nos encontraremos con la pantalla de la figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Manage-Things"

\end_inset

, en la que pincharemos el botón 
\family sans
\lang english
Register
\begin_inset space ~
\end_inset

a
\begin_inset space ~
\end_inset

thing
\family default
\lang spanish
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/platform-04-register-a-thing.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Register-a-thing"

\end_inset

Opciones para el registro de dispositivos.
\end_layout

\end_inset


\end_layout

\end_inset

Seleccionaremos 
\family sans
\lang english
Create
\begin_inset space ~
\end_inset

a
\begin_inset space ~
\end_inset

single
\begin_inset space ~
\end_inset

thing
\family default
\lang spanish
 (figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Register-a-thing"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/platform-05-thing-details.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:form:thing-parameters"

\end_inset

Formulario de parámetros del dispositivo.
\end_layout

\end_inset


\end_layout

\end_inset

Ahora podremos empezar a definir los distintos parámetros de nuestro dispositivo
 (figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:form:thing-parameters"

\end_inset

).
 Para empezar, tendremos que darle un nombre a nuestro dispositivo, 
\family typewriter
\series bold
\size small
\color brown
Name
\family default
\series default
\size default
\color inherit
, que anotaremos para su posterior uso.
\end_layout

\begin_layout Standard
Aunque este es el único campo requerido, también podríamos definir algunos
 atributos, como la versión del 
\lang english
firmware
\lang spanish
 o los sensores que implementa el dispositivo.
 Recordemos que estos atributos sirven para describir el dispositivo, y
 no deben confundirse con el estado del mismo (sección
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Esquema-de-funcionamiento"

\end_inset

).
 De forma alternativa, nuestro dispositivo podría heredar los atributos
 de un tipo que hayamos definido previamente.
\end_layout

\begin_layout Standard
Una vez concluida la definición de nuestro dispositivo, pulsaremos el botón
 
\family sans
\lang english
Next
\family default
\lang spanish
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
MISSING
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Manage-Things-(with-device)"

\end_inset

Pestaña de administración de dispositivos (
\family sans
AWS
\begin_inset space ~
\end_inset

IoT\SpecialChar menuseparator
Manage\SpecialChar menuseparator
Things
\family default
), después de haber registrado nuestro dispositivo.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Desde el menú lateral, podemos acceder a pestaña 
\family sans
\lang english
Manage
\family default
\lang spanish
, donde ahora se mostrará nuestro recién definido dispositivo (figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Manage-Things-(with-device)"

\end_inset

).
 Haciendo click en el mismo, podremos revisar su configuración y algunos
 datos de interés (figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Thing-properties"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
MISSING
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Thing-properties"

\end_inset

Propiedades del dispositivo registrado.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En la ventana de propiedades del dispositivo (figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Thing-properties"

\end_inset

) Anotaremos ### y ### para su posterior uso.
\end_layout

\begin_layout Standard
Llegados a este punto, habremos terminado de configurar la plataforma.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Subsection
Creación del certificado digital
\end_layout

\begin_layout Subsection
Creación de una política
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

acceso (
\lang english
policy
\lang spanish
)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset Newpage newpage
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Configuración-de-NodeMCU"

\end_inset

Configuración del módulo NodeMCU
\begin_inset space ~
\end_inset

Amica
\end_layout

\begin_layout Standard
En esta sección mostraremos cómo ensamblar y programar el módulo 
\emph on
NodeMCU
\begin_inset space ~
\end_inset

Amica
\emph default
 para lea la distancia proporcionada por el sensor 
\emph on
US-100
\emph default
 y la envíe a la plataforma AWS
\begin_inset space ~
\end_inset

IoT.
 Este proceso requiere tener instalado el IDE de Arduino, que deberá disponer
 de la 
\lang english
toolchain
\lang spanish
 del ESP8266.
 Los pasos necesarios para instalar esta 
\lang english
toolchain
\lang spanish
 están descritos en el Apéndice
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Configuración-del-IDE"

\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sec:Montaje-del-dispositivo"

\end_inset

Montaje del dispositivo
\end_layout

\begin_layout Standard
En primer lugar, nos encargaremos de la conexión entre el módulo 
\emph on
NodeMCU
\begin_inset space ~
\end_inset

Amica
\emph default
 y el sensor 
\emph on
US-100
\emph default
.
 Aunque existen múltiples formas de realizar esta conexión, nosotros hemos
 optado por la indicada en la tabla
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Conexión-MUC_US100"

\end_inset

.
 El resultado deberá ser parecido al del esquema de la figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Esquema-montaje"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Descripción
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MCU
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
US-100
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Alimentación (5V)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Vin
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
VCC
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Alimentación (0V)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
GND
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
GND
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Disparo del sensor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
D7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Trig/Tx
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Respuesta del sensor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
D6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Echo/Rx
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Conexión-MUC_US100"

\end_inset

Conexión entre el módulo NodeMCU
\begin_inset space ~
\end_inset

Amica y el sensor US-100.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/circuit__bb.pdf
	width 90text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Esquema-montaje"

\end_inset

Esquema del montaje del circuito en la placa de prototipado.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para comprobar que nuestro montaje es correcto, podemos comprobar que funciona
 con el proyecto Ping proporcionado junto a este documento (#URL#).
 Este proyecto es una modificación del ejemplo homónimo, incluido en la
 biblioteca de Arduino, con el fin de adaptar los pines a los del 
\emph on
NodeMCU
\begin_inset space ~
\end_inset

Amica
\emph default
.
 Si todo va bien, el al abrir el 
\lang english
Serial
\begin_inset space ~
\end_inset

Monitor
\lang spanish
 deberían visualizarse mensajes similares a los de la figura
\begin_inset space ~
\end_inset

##.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Tenemos que configurar los pines:
\end_layout

\begin_layout Plain Layout
const int pingPin = D7;
\end_layout

\begin_layout Plain Layout
const int pingiPin = D6;
\end_layout

\begin_layout Plain Layout
SOLO UN PIN EN EL EJEMPLO...
 QUE HACEMOS??
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Instalación de la biblioteca AWS-SDK-Arduino
\end_layout

\begin_layout Standard
Amazon Web Services proporciona un SDK oficial para conectarse con AWS-IoT
 desde cualquier dispositivo.
 Este kit de desarrollo, denominado 
\family sans
AWS
\begin_inset space ~
\end_inset

IoT
\begin_inset space ~
\end_inset

Device
\begin_inset space ~
\end_inset

SDK
\family default
, está escrito en el lenguaje de programación
\begin_inset space ~
\end_inset

C y puede portarse a cualquier tipo de dispositivo.
 Además, su código fuente está disponible en GitHub (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/aws/aws-iot-device-sdk-embedded-C
\end_layout

\end_inset

), de donde podemos descargarlo.
 Toda la información acerca de 
\family sans
AWS
\begin_inset space ~
\end_inset

IoT
\begin_inset space ~
\end_inset

Device
\begin_inset space ~
\end_inset

SDK
\family default
 está disponible en 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://aws.amazon.com/iot/sdk/
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Por desgracia, el kit de desarrollo oficial no está disponible para Arduino.
 Por este motivo, usaremos como alternativa 
\family sans
AWS-SDK-Arduino
\family default
, una biblioteca experimental creada por 
\emph on
AWS
\begin_inset space ~
\end_inset

Labs
\emph default
 y mantenida por la comunidad, cuyo objetivo es facilitar el acceso a los
 servicios de AWS a partir de dispositivos compatibles con la plataforma
 Arduino.
 En concreto, usaremos la versión para el chip ESP8266, publicada en forma
 de biblioteca de Arduino, que podemos encontrar en el siguiente enlace:
 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/guyikcgg/aws-sdk-arduino-lib/releases/tag/v0.9.1-iot-beta
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "95col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family sans
\series bold
\size small
Nota:
\series default
 En el momento de redactar este documento, 
\series bold
no existe soporte oficial del AWS-SDK para la plataforma ESP8266
\series default
.
 La versión de la biblioteca usada en este trabajo es 
\series bold
experimental
\series default
: ha sido elaborada por el autor a partir de distintas versiones desarrolladas
 por la comunidad.
 La última actualización del código fuente data de junio de 2016.
 Aunque existen versiones más recientes de la biblioteca, se ha escogido
 esta por permitir la conexión con AWS
\begin_inset space ~
\end_inset

IoT (en la fecha actual).
 Debe señalarse que los frecuentes cambios en la plataforma de Amazon podrían
 causar problemas de compatibilidad, requiriendo actualizar la biblioteca.
 El autor no se hace responsable del mantenimiento de la biblioteca.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para instalar esta biblioteca, seguiremos el proceso de importación de ficheros
 ZIP descrito en la web oficial de Arduino (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.arduino.cc/en/Guide/Libraries
\backslash
#toc4
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/device-04-github-aws-sdk-arduino.png
	lyxscale 50
	width 100text%

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO volver a hacer captura, pero sin identificarme
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:AWS-SDK-Arduino-GitHub"

\end_inset

Descarga de AWS-SDK-Arduino para ESP8266 desde GitHub.
\end_layout

\end_inset


\end_layout

\end_inset

En primer lugar, descargaremos la biblioteca 
\family sans
AWS-SDK-Arduino
\family default
 para ESP8266 desde la web 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/guyikcgg/aws-sdk-arduino-lib/releases/tag/v0.9.1-iot-beta
\end_layout

\end_inset

, pinchando en el enlace 
\family sans
\lang english
Source
\begin_inset space ~
\end_inset

code
\begin_inset space ~
\end_inset

(zip)
\family default
\lang spanish
 (figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:AWS-SDK-Arduino-GitHub"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/device-05-add-zip-library.png
	lyxscale 60
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:add-zip-library"

\end_inset

Acceso a la ventana de importación de bibliotecas en ZIP en el IDE de Arduino.
\end_layout

\end_inset


\end_layout

\end_inset

Una vez descargada la biblioteca, podremos añadirla al IDE de Arduino accediendo
 a la ventana de importación de bibliotecas en ZIP, a través del menú 
\family sans
\lang english
Sketch\SpecialChar menuseparator
Include
\begin_inset space ~
\end_inset

Library\SpecialChar menuseparator
Add
\begin_inset space ~
\end_inset

.ZIP
\begin_inset space ~
\end_inset

Library...

\family default
\lang spanish
 (figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:add-zip-library"

\end_inset

).
\end_layout

\begin_layout Subsection
Configuración de la conexión
\end_layout

\begin_layout Standard
\noindent
Una vez instalada la biblioteca, usaremos el ejemplo incluido en la misma
 para conectarnos con AWS.
 Para ello, tendremos que utilizar los siguientes parámetros, que hemos
 anotado previamente: 
\begin_inset Note Note
status open

\begin_layout Plain Layout
FIXME
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
\noindent
iotClient.setAWSRegion("
\color brown
us-west-2
\color inherit
");
\end_layout

\begin_layout LyX-Code
\noindent
iotClient.setAWSEndpoint("amazonaws.com");
\end_layout

\begin_layout LyX-Code
\noindent
iotClient.setAWSDomain("
\color brown
a3aa6mposshpif.iot.us-west-2
\color inherit
.amazonaws.com");
\end_layout

\begin_layout LyX-Code
\noindent
iotClient.setAWSPath("/things/
\color brown
mything
\color inherit
/shadow");
\end_layout

\begin_layout LyX-Code
\noindent
iotClient.setAWSKeyID("
\color brown
AKIAJHVTKXW5SHJCUHRQ
\color inherit
");
\end_layout

\begin_layout LyX-Code
\noindent
iotClient.setAWSSecretKey("
\color brown
mTRB2vzRzrwsb65NiNQFlQ6+4XGNp4leZJY5S7c3
\color inherit
");
\end_layout

\begin_layout Standard
También será necesario indicar las opciones de conexión Wi-Fi.
\end_layout

\begin_layout LyX-Code
char *ssid="
\color brown
MySSID
\color inherit
"; 
\end_layout

\begin_layout LyX-Code
char *password="
\color brown
MyPASS
\color inherit
";
\end_layout

\begin_layout Standard
Una vez hecho esto, podemos compilar el ejemplo y subirlo a la placa.
 Al abrir el monitor serial deberíamos ver lo siguiente 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO screenshot
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "95col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family sans
\series bold
\size small
Nota:
\series default
 El proceso de compilación y de programación del módulo ESP8266 es lento
 y puede tomar más de dos minutos, dependiendo de las prestaciones del ordenador.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ahora podemos ir al AWS y ver que efectivamente se está produciendo una
 comunicación.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO screenshot
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Para 
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:DASHBOARD"

\end_inset

Visualización de los datos
\end_layout

\begin_layout Chapter
\start_of_appendix
\begin_inset CommandInset label
LatexCommand label
name "chap:Configuración-del-IDE"

\end_inset

Configuración del IDE de Arduino para ESP8266
\end_layout

\begin_layout Standard
Para trabajar con la placa 
\emph on
NodeMCU
\begin_inset space ~
\end_inset

Amica
\emph default
, tendremos que instalar la 
\lang english
toolchain
\lang spanish
 del módulo ESP8266.
 Sin ella, no podremos compilar el código fuente que generemos ni podremos
 subir el programa a la placa.
 Por simplicidad, usaremos una 
\emph on
toolchain
\emph default
 basada en el IDE de Arduino.
 Como ventaja adicional, cabe destacar la cantidad de recursos libres y
 gratuitos que podemos encontrar 
\emph on
on-line
\emph default
, gracias a la gran comunidad de Arduino.
\end_layout

\begin_layout Section
Instalación de la 
\lang english
toolchain
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
La comunicación entre el ESP8266 y el ordenador se lleva a cabo mediante
 una interfaz serie virtual, que se consigue gracias al conversor 
\emph on
USB
\begin_inset space ~
\end_inset

a
\begin_inset space ~
\end_inset

UART
\emph default
 CP2102.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "95col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family sans
\series bold
\size small
Nota:
\series default
 La instalación de la 
\lang english
toolchain
\lang spanish
 asume que el IDE de Arduino está correctamente instalado en el ordenador
 de trabajo.
 Para obtener información sobre el proceso de instalación del IDE de Arduino,
 nos referimos a la guía de iniciación en la web oficial de Arduino ( 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.arduino.cc/en/Guide/HomePage
\end_layout

\end_inset

).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Hemos elegido ESP8266 en Arduino IDE.
 Para instalarla, seguiremos los pasos indicados en 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/esp8266/Arduino#installing-with-boards-manager
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/device-01-preferences.png
	lyxscale 60
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Preferences-Arduino-IDE"

\end_inset

Preferencias del IDE de Arduino con la URL del 
\emph on
ESP8266
\begin_inset space ~
\end_inset

Arduino
\begin_inset space ~
\end_inset

core
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Una vez instalado el IDE de Arduino, hay que entrar en 
\family sans
\lang english
File\SpecialChar menuseparator
Preferences
\family default
\lang spanish
 y añadir la siguiente URL a 
\family sans
\lang english
Additional
\begin_inset space ~
\end_inset

Boards
\begin_inset space ~
\end_inset

Manager
\begin_inset space ~
\end_inset

URLs
\family default
\lang spanish
 (figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Preferences-Arduino-IDE"

\end_inset

).
\end_layout

\begin_layout LyX-Code
http://arduino.esp8266.com/stable/package_esp8266com_index.json
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/device-02-menu.png
	lyxscale 60
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:menu:boards-manager"

\end_inset

Acceso al gestor de placas a través de los menús (Arduino IDE).
\end_layout

\end_inset


\end_layout

\end_inset

A continuación, accederemos al gestor de placas a través de 
\family sans
\lang english
Tools\SpecialChar menuseparator
Board\SpecialChar menuseparator
Boards
\begin_inset space ~
\end_inset

Manager...

\family default
\lang spanish
 (figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:menu:boards-manager"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement th
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/device-02-boards-manager.png
	lyxscale 60
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:boards-manager"

\end_inset

Gestor de placas (
\family sans
Boards
\begin_inset space ~
\end_inset

Manager
\family default
) en el IDE de Arduino.
 Podemos encontrar el paquete 
\family sans
esp8266
\family default
 fácilmente usando la barra de búsqueda.
\end_layout

\end_inset


\end_layout

\end_inset

Desde aquí podremos instalar el paquete 
\family sans
esp8266
\family default
, que encontraremos fácilmente ayudándonos de la barra de búsqueda (figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:boards-manager"

\end_inset

).
 Este paquete da soporte a una gran variedad de placas que integran el chip
 ESP8266, incluyendo 
\emph on
NodeMCU
\begin_inset space ~
\end_inset

Amica
\emph default
.
\end_layout

\begin_layout Section
Configuración de la 
\lang english
toolchain
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/device-03-select-board.png
	lyxscale 60
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:menu:board-selection"

\end_inset

Acceso al gestor de placas a través de los menús (Arduino IDE).
\end_layout

\end_inset


\end_layout

\end_inset

Para que podamos compilar y subir el código correctamente, tendremos que
 configurar la recién instalada 
\lang english
toolchain
\lang spanish
.
 Para ello, nos aseguraremos que las opciones del menú 
\family sans
\lang english
Tools
\family default
\lang spanish
 son las indicadas en la figura
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:menu:board-selection"

\end_inset

.
\end_layout

\begin_layout Standard
En concreto, nos fijaremos en las siguientes opciones:
\end_layout

\begin_layout Itemize

\family sans
\lang english
Board:
\family default
\lang spanish
 seleccionaremos 
\family sans
NodeMCU
\begin_inset space ~
\end_inset

1.0
\begin_inset space ~
\end_inset

(ESP-12E
\begin_inset space ~
\end_inset

Module)
\family default
.
\end_layout

\begin_layout Itemize

\family sans
\lang english
Upload
\begin_inset space ~
\end_inset

Speed:
\family default
\lang spanish
 seleccionaremos 
\family sans
115200
\family default
 baudios
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
La velocidad de transferencia por defecto de este módulo es 9600 baudios.
 Sin embargo, es posible configurarlos con una velocidad superior.
 Los dispositivos usados en la asignatura deberían estar configurados para
 usar una velocidad de 115200 baudios.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize

\family sans
\lang english
Port:
\family default
\lang spanish
 seleccionaremos el puerto de comunicación sere virtual asociado al dispositivo.
 El nombre y número del puerto cambiarán dependiendo del sistema.
\end_layout

\begin_layout Standard
El resto de opciones deberán permanecer en su valor por defecto.
\end_layout

\begin_layout Standard
\align center
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "95col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family sans
\series bold
\size small
Nota:
\series default
 Existe una multitud de circunstancias por las que el puerto podría no mostrarse
 o no estar disponible.
 Para solucionar este problema, podemos referirnos a la guíaa de solución
 de problemas de Arduino (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.arduino.cc/en/Guide/Troubleshooting
\backslash
#toc16
\end_layout

\end_inset

) o a las guías de iniciación (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.arduino.cc/en/Guide/Linux
\backslash
#toc6
\end_layout

\end_inset

).
 En el caso de que nuestro ordenador necesite un controlador específico
 para establecer la comunicación con el chip CP2102, podemos descargar los
 
\lang english
drivers
\lang spanish
 desde 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-
drivers
\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
